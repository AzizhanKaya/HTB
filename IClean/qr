<!DOCTYPE html>
<html lang="en">
<head>
<!-- basic -->
<meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1">
<!-- mobile metas -->
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="viewport" content="initial-scale=1, maximum-scale=1">
<!-- site metas -->
<title>Capiclean</title>
<meta name="keywords" content="">
<meta name="description" content="">
<meta name="author" content=""> 
<!-- bootstrap css -->
<link rel="stylesheet" type="text/css" href="/static/css/bootstrap.min.css">
<!-- style css -->
<link rel="stylesheet" type="text/css" href="/static/css/style.css">
<!-- Responsive-->
<link rel="stylesheet" href="/static/css/responsive.css">
<!-- fevicon -->
<link rel="icon" href="static/images/favicon.png" type="image/png" />
<!-- Scrollbar Custom CSS -->
<link rel="stylesheet" href="/static/css/jquery.mCustomScrollbar.min.css">
<!-- Tweaks for older IEs-->
<link rel="stylesheet" href="https://netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.css">
<!-- owl stylesheets --> 
<link rel="stylesheet" href="/static/css/owl.carousel.min.css">
<link rel="stylesheet" href="/static/css/owl.theme.default.min.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/fancybox/2.1.5/jquery.fancybox.min.css" media="screen">
</head>
<body>
  <!--header section start -->
    <div class="header_section">
      <div class="container-fluid">
        <div class="row">
          <div class="col-md-3">
            <div class="logo"><a href="/"><img src="/static/images/logo.png"></a></div>
          </div>
          <div class="col-md-9">
            <div class="menu_text">
              <ul>
                <div class="togle_3">
                  <div class="menu_main">
                    <div class="padding_left0"><a href="#"></a>
                    <span class="padding_left0"><a href="login">Login</a></span></div>
                  </div>
                  <div class="shoping_bag"><img src="/static/images/search-icon.png"></div>
                </div> 
                <div id="myNav" class="overlay">
                <a href="javascript:void(0)" class="closebtn" onclick="closeNav()">&times;</a>
                <div class="overlay-content">
                  <a href="/">Home</a>
                  <a href="services">Services</a>
                  <a href="about">About</a>
                  <a href="choose">Choose</a>
                  <a href="team">Team</a>
                </div>
                </div>
                <span class="navbar-toggler-icon"></span>
                <span onclick="openNav()"><img src="/static/images/toggle-icon.png" class="toggle_menu"></span>
              </ul>
            </div>      
          </div>
        </div>
      </div>
    <!-- banner section start -->
    <div class="banner_section layout_padding">
      <div class="container">
        <div class="row">
          <div class="col-sm-5">
            <h1 class="banner_taital">Keep YOUR</h1> 
            <h1 class="banner_taital_1">house CLEAN</h1>
            <p class="banner_text">Let us take care of the cleaning so that you can focus on what really matters – running your business or enjoying your home.</p>
          </div>
          <div class="col-sm-5">
            <div><img src="/static/images/img-1.png" class="image_1"></div>
          </div>
        </div>
      </div>
    </div>
    <!-- banner section end -->
    </div>
    <!-- header section end -->
    <!-- services section start -->
    <div class="services_section layout_padding">
      <div class="container">
        <h1 class="services_taital"><span>Our</span> <img src="/static/images/icon-1.png"> <span style="color: #1f1f1f">Services</span></h1>
        <p class="services_text">Our team of trained and experienced professionals use the latest equipment and cleaning products to ensure that every nook and cranny is spotless. From daily or weekly cleaning to deep cleaning and disinfection services, we have the expertise to handle any cleaning challenge.</p>
        <div id="main_slider" class="carousel slide" data-ride="carousel">
          <div class="carousel-inner">
            <div class="carousel-item active">
              <div class="services_section_2 layout_padding">
                <div class="row">
                  <div class="col-md-6">
                    <div class="box_section active">
                      <div class="tiles_img"></div>
                      <h3 class="tile_text active">Tile & Grout</h3>
                      <p class="lorem_text active">Tile and grout cleaning is the process of removing dirt, stains, and bacteria from tile and grout surfaces.</p>
                    </div>
                  </div>
                  <div class="col-md-6">
                    <div class="box_section">
                      <div class="tiles_img_1"></div>
                      <h3 class="tile_text">Carpet Cleaning</h3>
                      <p class="lorem_text">Carpet cleaning is a process of removing dirt, stains, and allergens from carpets to improve their appearance and cleanliness</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="carousel-item">
              <div class="services_section_2 layout_padding">
                <div class="row">
                  <div class="col-md-6">
                    <div class="box_section active">
                      <div class="tiles_img"></div>
                      <h3 class="tile_text active">Tile & Grout</h3>
                      <p class="lorem_text active">Tile and grout cleaning is the process of removing dirt, stains, and bacteria from tile and grout surfaces.</p>
                    </div>
                  </div>
                  <div class="col-md-6">
                    <div class="box_section">
                      <div class="tiles_img_1"></div>
                      <h3 class="tile_text">Carpet Cleaning</h3>
                      <p class="lorem_text">Carpet cleaning is a process of removing dirt, stains, and allergens from carpets to improve their appearance and cleanliness</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="carousel-item">
              <div class="services_section_2 layout_padding">
                <div class="row">
                  <div class="col-md-6">
                    <div class="box_section active">
                      <div class="tiles_img"></div>
                      <h3 class="tile_text active">Tile & Grout</h3>
                      <p class="lorem_text active">Tile and grout cleaning is the process of removing dirt, stains, and bacteria from tile and grout surfaces.</p>
                    </div>
                  </div>
                  <div class="col-md-6">
                    <div class="box_section">
                      <div class="tiles_img_1"></div>
                      <h3 class="tile_text">Carpet Cleaning</h3>
                      <p class="lorem_text">Carpet cleaning is a process of removing dirt, stains, and allergens from carpets to improve their appearance and cleanliness</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <a class="carousel-control-prev" href="#main_slider" role="button" data-slide="prev">
            <i class="fa fa-angle-left"></i>
          </a>
          <a class="carousel-control-next" href="#main_slider" role="button" data-slide="next">
            <i class="fa fa-angle-right"></i>
          </a>
        </div>
      </div>
    </div>
    <!-- services section start -->
    <!-- about section start -->
    <div class="about_section layout_padding">
      <div class="container">
        <div class="row">
          <div class="col-md-6">
            <div><img src="/static/images/img-2.png" class="image_2"></div>
          </div>
          <div class="col-md-6">
            <h1 class="services_taital"><span>About </span> <img src="/static/images/icon-1.png"> <span style="color: #1f1f1f">Cleaning</span></h1>
            <p class="ipsum_text">We understand that a clean and well-maintained space is essential to the success and productivity of any business or home. That's why we offer comprehensive cleaning services that are tailored to your unique needs and schedule. We take pride in providing reliable and efficient cleaning services that meet and exceed our clients' expectations. We strive to build long-term relationships with our clients based on trust, open communication, and exceptional service,</p>
          </div>
        </div>
      </div>
    </div>
    <!-- about section end -->
    <!-- choose section start -->
    <div class="choose_section layout_padding">
      <div class="container">
        <h1 class="choose_taital"><span>Why </span> <img src="/static/images/icon-1.png"> <span style="color: #1f1f1f">Choose Us</span></h1>
        <p class="choose_text">Choose us to clean your house, car, office and othere buildings that require cleaning.</p>
        <div class="choose_section_2 layout_padding">
          <div class="row">
            <div class="col-lg-3 col-sm-6">
              <div class="choose_box">
                <h1 class="client_taital">12004+</h1>
                <h4 class="client_text">Our clients</h4>
              </div>
            </div>
            <div class="col-lg-3 col-sm-6">
              <div class="choose_box">
                <h1 class="client_taital">10004+</h1>
                <h4 class="client_text">Happy clients</h4>
              </div>
            </div>
            <div class="col-lg-3 col-sm-6">
              <div class="choose_box">
                <h1 class="client_taital">804+</h1>
                <h4 class="client_text">Supports</h4>
              </div>
            </div>
            <div class="col-lg-3 col-sm-6">
              <div class="choose_box">
                <h1 class="client_taital">905+</h1>
                <h4 class="client_text">Awards</h4>
              </div>
            </div>
          </div>
          <div class="image_3"><img src="/static/images/img-3.png"></div>
          <div class="get_bt"><a href="quote">Get A quote</a></div>
        </div>
      </div>
    </div>
    <!-- choose section end -->
    <!-- team section start -->
    <div class="team_section layout_padding">
      <div class="container">
        <h1 class="choose_taital"><span>Our </span> <img src="/static/images/icon-1.png"> <span style="color: #1f1f1f">Team</span></h1>
        <p class="choose_text">Our team of professionals are ready to clean any dirty nasty stuff that needs cleaning profesionally.</p>
        <div class="team_section_2 layout_padding">
          <div class="container">
            <div class="images_main_1">
              <div class="row">
                <div class="col-sm-5">
                  <div class="image_4"><img src="/static/images/img-4.png"></div>
                  <h6 class="follow_text">Follow Us</h6>
                  <div class="follow_social_icon">
                    <ul>
                      <li><a href="#"><img src="/static/images/fb-icon.png"></a></li>
                      <li><a href="#"><img src="/static/images/twitter-icon.png"></a></li>
                      <li><a href="#"><img src="/static/images/linkden-icon.png"></a></li>
                      <li><a href="#"><img src="/static/images/instagram-icon.png"></a></li>
                    </ul>
                  </div>
                </div>
                <div class="col-sm-7">
                  <h2 class="consectetur_text">Mary Pikes</h2>
                  <p class="dummy_text">Introducing Mary Pikes: a dedicated and efficient cleaner with a flair for perfection. With Mary's meticulous attention to detail and commitment to excellence, your space will be transformed into a pristine haven. Trust Mary to bring a touch of sparkle to every corner, leaving you delighted with the results.</p>
                </div>
              </div>
            </div>
            <div class="images_main">
              <div class="row">
                <div class="col-sm-7">
                  <h2 class="consectetur_text_1">Martha Smith</h2>
                  <p class="dummy_text_1">Meet Martha, your passionate cleaner who brings joy to every space she touch. With 10 years of experience, she transforms spaces into immaculate sanctuaries, leaving smiles in her wake.</p>
                </div>
                <div class="col-sm-5">
                  <div class="image_4"><img src="/static/images/img-5.png"></div>
                  </div>
                </div>
              </div>
            </div>
            <div class="images_main_1">
              <div class="row">
                <div class="col-sm-5">
                  <div class="image_4"><img src="/static/images/img-6.png"></div>
                  </div>
                </div>
                <div class="col-sm-7">
                  <h2 class="consectetur_text">Jasmine Summers</h2>
                  <p class="dummy_text">Meet Jasmine, your dedicated cleaner who takes pride in her work. With 5 years of experience, she brings a touch of magic to every corner, creating spaces that sparkle with cleanliness and warmth.</p>
                </div>
              </div>
            </div>
            <div class="images_main">
              <div class="row">
                <div class="col-sm-7">
                  <h2 class="consectetur_text_1">Mike Samuels</h2>
                  <p class="dummy_text_1">Meet Mike, your friendly and meticulous cleaner. With a passion for cleanliness and an eye for detail, Mike ensures that every space he touches shines with perfection. Trust Mike to leave your home or office spotless and inviting, every time.</p>
                </div>
                <div class="col-sm-5">
                  <div class="image_4"><img src="/static/images/img-7.png"></div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <!-- team section start -->
    <!-- footer section start -->
    <div class="footer_section layout_padding">
      <div class="container">
        <div class="footer_main">
          <div class="footer_left">
            <h1 class="contact_taital"><span>Contact </span> <img src="/static/images/icon-2.png"> <span>Us</span></h1>
          </div>
          <div class="footer_left">
            <div class="location_text"><a href="#"><img src="/static/images/map-icon.png"><span class="padding_left_15">Locations</span></a></div>
          </div>
          <div class="footer_left">
            <div class="location_text"><a href="#"><img src="/static/images/call-icon.png"><span class="padding_left_15">+12 345678901234</span></a></div>
          </div>
          <div class="footer_left">
            <div class="location_text"><a href="#"><img src="/static/images/map-icon.png"><span class="padding_left_15">contact@capiclean.htb</span></a></div>
          </div>
        </div>
      </div>
    </div>
    <!-- footer section end -->
    <!-- copyright section start -->
    <div class="copyright_section">
      <div class="container">
        <p class="copyright_text">Copyright 2023 All Right Reserved By <b>CapiClean</b></p>
      </div>
    </div>
    <!-- copyright section end -->
    <!-- Javascript files-->
    <script src="/static/js/jquery.min.js"></script>
    <script src="/static/js/popper.min.js"></script>
    <script src="/static/js/bootstrap.bundle.min.js"></script>
    <script src="/static/js/jquery-3.0.0.min.js"></script>
    <script src="/static/js/plugin.js"></script>
    <!-- sidebar -->
    <script src="/static/js/jquery.mCustomScrollbar.concat.min.js"></script>
    <script src="/static/js/custom.js"></script>
    <!-- javascript --> 
    <script src="/static/js/owl.carousel.js"></script>
    <script src="/static/js/jquery.fancybox.min.js"></script>
    <script>
    $(document).ready(function(){
    $(".fancybox").fancybox({
    openEffect: "none",
    closeEffect: "none"
    });
         
    $(".zoom").hover(function(){
         
    $(this).addClass('transition');
    }, function(){
         
    $(this).removeClass('transition');
    });
    });
    </script> 
    <script>
     function openNav() {
     document.getElementById("myNav").style.width = "100%";
    }
     function closeNav() {
     document.getElementById("myNav").style.width = "0%";
    }
    </script>  
</body>
</html>